import { craftCards } from '../modules/craftCards';
import { playSound } from '../modules/playSound';
import { toCapitalize } from '../modules/toCapitalize';
import { generateElement, setFeedback } from '../modules/domElements';

// Index
import { initialElements, allElementsFromImages } from '../modules/readFiles';
import jsonElements from '../api/elements.json';
import '../components/ScoreBoard';

class CardElement extends HTMLElement {
	constructor() {
		super();
		this.attachShadow({ mode: 'open' });
	}

	static get styles() {
		return /* CSS */ `
			:host {
				width: 150px;
				min-width: 120px;
				height: 160px;
				text-align: center;
				border: 2px solid var(--border-color);
				background-color: var(--third-bg);
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				align-items: center;
				color: var(--grey-100);
				border-radius: 0.5rem;
				padding: var(--n-padding);
				cursor: grab;
				position: relative;
				overflow: hidden;
			}

			:host(:active) {
				cursor: grabbing;
			}
			
			:host(.droppable) {
				border-style: outset;
				border-color: #ccc;
				opacity: 0.3;
			}

			:host(.new) {
        animation: flip-in-ver-right 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
      }

      :host(.bad) {
        animation: shake-horizontal 0.8s cubic-bezier(0.455, 0.030, 0.515, 0.955) both;
      }

			@keyframes new-card {
				0%, 35% { transform: scale(0.25); }
				100% { transform: scale(1); }
			}

			/* ----------------------------------------------
      * Generated by Animista on 2022-8-30 21:27:31
      * Licensed under FreeBSD License.
      * See http://animista.net/license for more info.
      * w: http://animista.net, t: @cssanimista
      * ---------------------------------------------- */
      @keyframes flip-in-ver-right {
        0% {
          transform: rotateY(-80deg);
          opacity: 0;
        }
        100% {
          transform: rotateY(0);
          opacity: 1;
        }
      }

			@keyframes shake-horizontal {
        0%,
        100% {
          transform: translateX(0);
        }
        10%,
        30%,
        50%,
        70% {
          transform: translateX(-10px);
					box-shadow: inset 2px 2px 8px rgba(255,10,10,0.7), inset -2px -2px 8px rgba(255,10,10,0.7);
					border-color: transparent;
        }
        20%,
        40%,
        60% {
          transform: translateX(10px);
        }
        80% {
          transform: translateX(8px);
        }
        90% {
          transform: translateX(-8px);
        }
      }

			span {
				display: block;
				margin-top: auto;
				user-select: none;
				text-transform: uppercase;
				white-space: wrap
			}

			img {
				max-width: 60%;
				height: 90px;
				display: block;
			}
    `;
	}

	setType(type) {
		this.type = type;
		this.setAttribute('type', type);
		this.setAttribute('id', 'e' + crypto.randomUUID());
	}

	connectedCallback() {
		this.setType(this.getAttribute('type') || 'html');
		this.name = toCapitalize(this.type);

		this.render();
		this.draggable = true;
		this.addEventListener('dragstart', (ev) => this.onDragStart(ev));
		this.addEventListener('dragend', (ev) => this.onDragEnd(ev));
		this.addEventListener('dragenter', (ev) => this.onDragEnter(ev));
		this.addEventListener('drag', (ev) => this.onDrag(ev));
		this.addEventListener('dragleave', (ev) => this.onDragLeave(ev));
		this.addEventListener('dragover', (ev) => this.onDragOver(ev));
		this.addEventListener('drop', (ev) => this.onDrop(ev));
	}

	// Cuando empiezad a arrastrar
	onDragStart(ev) {
		// this.classList.add('ghost');
		ev.dataTransfer.setData('text/plain', this.id);
	}

	// CUANDO DEJAS DE ARRASTRAR
	onDragEnd(ev) {
		this.classList.remove('ghost');
	}

	// CUANDO MUEVES EL ELEMENTO ARRASTRABLE (SIEMPRE SE MUEVE)
	onDrag(ev) {
		ev.preventDefault();
	}

	// CUANDO MUEVES EL ELEMENTO ENCIMA DE OTRO ELEMENTO ARRASTRABLE
	onDragOver(ev) {
		if (ev.preventDefault) {
			ev.preventDefault();
		}
		return false;
	}

	// CUANDO ENTRAS DENTRO DEL AREA DE UN/OTRO ELEMENTO ARRASTRABLE
	onDragEnter(ev) {
		playSound('plop');
		const element = ev.srcElement;
		element.classList.add('droppable');
	}

	// CUANDO SALES DE LA ZONA DE UN/OTRO ELEMENTO ARRASTRABLE
	onDragLeave(ev) {
		const element = ev.srcElement;
		element.classList.remove('droppable');
	}

	onDrop(ev) {
		ev.preventDefault();
		ev.stopPropagation();

		const dragElementID = ev.dataTransfer.getData('text/plain');

		const dragElement = document.getElementById(dragElementID);
		const dropElement = ev.srcElement;
		dropElement.classList.remove('droppable');

		const results = craftCards(dragElement.type, dropElement.type);
		const allElements = [
			...document.querySelectorAll('#tech card-element'),
		].map((card) => card.type);

		const existResults = results.length > 0;
		const existElement = allElements.includes(results[0]);
		existElement &&
			!existElement &&
			document.querySelector('score-board').incElements();

		results.forEach((keyword) => {
			const hasElement = allElements.includes(keyword);

			if (!hasElement) {
				const element = generateElement(keyword);

				keyword === 'bsod' && playSound('bsod');
				!keyword === 'bsod' && setFeedback(element, 'positive');
				dropElement.insertAdjacentElement('beforebegin', element);
			}

			if (hasElement) {
				playSound('duplicated');
				const elements = [...document.querySelectorAll('#tech card-element')];
				const originalElement = elements.find((item) => item.type === keyword);
				setFeedback(originalElement, 'duplicated');
			}
		});

		results.length === 0 && setFeedback(dropElement, 'negative');

		return false;
	}

	render() {
		this.shadowRoot.innerHTML = /* HTML */ `
			<style>
				${CardElement.styles}
			</style>
			<img
				draggable="false"
				src="/assets/icons/${this.type}.svg"
				alt="${this.name}"
			/>
			<span>${this.name}</span>
		`;
	}
}

customElements.define('card-element', CardElement);

export const CreateCardElement = () => {
	const techContainer = document.getElementById('tech');
	const scoreBoard = document.querySelector('score-board');

	// Creamos los elementos iniciales de partida
	const fragment = document.createDocumentFragment();
	initialElements.forEach((name) => {
		const element = document.createElement('card-element');
		element.setAttribute('type', name);
		element.classList.add('smaller');
		fragment.append(element);
	});
	techContainer.append(fragment);

	const jsonEntries = Object.entries(jsonElements);
	const allCrafteableElements = [...new Set(jsonEntries.flat(Infinity))];

	scoreBoard.setElements(initialElements.length);
	scoreBoard.setTotal(allCrafteableElements.length);

	const checkAllCombinations = (currentElements) => {
		let i = 0;

		while (i < jsonEntries.length) {
			const [resultItem, combinations] = jsonEntries[i];

			combinations.forEach(([firstElement, secondElement]) => {
				const isCarfteable =
					!currentElements.includes(resultItem) &&
					currentElements.includes(firstElement) &&
					currentElements.includes(secondElement);

				if (isCarfteable) {
					i = 0;
					currentElements.push(resultItem);
				}
			});
			i++;
		}

		scoreBoard.setTotal(currentElements.length);
		return currentElements;
	};

	const crafteable = checkAllCombinations(structuredClone(initialElements));
	const notCrafteable = allElementsFromImages.filter(
		(key) => !crafteable.includes(key)
	);

	const sortedCrafteable = crafteable.sort();

	console.log(
		'Crafteable: ',
		sortedCrafteable.slice(0, 100),
		sortedCrafteable.slice(100)
	);
	console.log('No crafteable: ', notCrafteable.sort());
};
